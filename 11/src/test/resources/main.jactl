// Statement
class Statement {
  
  List givens = []
  Map conditions = [:]
  String canFly = "No";

  int getIndex(term) {
    for(int i = 0; i < givens.size(); i++) {
      if(givens[i] == term) {
        return i;
      }
    }
    return -1
  }

  String getAbility() {
    def rule;
    def crit;
    // Not enough info
    if(conditions.size() == 0 or givens.size() == 0) {
      canFly = "Maybe"
    }
    // Determinedly so
    conditions.each {
      rule = it[0]
      crit = it[1]
      if("not" in rule and "not" in crit) {
        rule =~ s/not //i
        crit =~ s/not //i
      } else if ("not" in rule) {
        rule =~ s/not //i
        crit = "not " + crit
      } else if ("not" in crit) {
        it[1] =~ s/not //i
        rule = "not " + rule
      }
      givens.each {
        if(rule == "able to fly" and crit == it){
          canFly = "Yes"
        }
      }
    }
    return canFly;
  }

}

// Parsing function
def parse(line) {
  def clause = new Statement()
  def lines = line.split("\\.")
  for(int i = 0; i < lines.size() - 1; i++) {
    switch(lines[i]) {
      /Pigs are (.*)/r -> clause.givens += $1
      /Everything that (?:is|are) (.*) (?:is|are) also (.*)/r -> do { 
        // Update givens to match synonymous definitions
        if($1 in clause.givens) {
          def idx = clause.getIndex($1)
          clause.givens[idx] = $2
        } else {
          clause.conditions[$1] = $2
        }
      }
      default -> null
    }
  }
  return clause
}

// Read from the input file
def line;
def clause;
while ((line = nextLine()) != null) { 
  clause = parse(line)
  print(clause)
  println clause.getAbility()
}
